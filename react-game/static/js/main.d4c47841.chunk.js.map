{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","quiz","question","answer","correct","numberquestion","totalcorrect","isAnswered","status","numberQuestion","totalCorrect","index","newCorrect","this","newStatus","slice","setState","newQuestion","map","key","className","onClick","check","next","back","reset","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,uLCuI5BC,G,8BAjIb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,CACJ,CACEC,SAAU,iDACVC,OAAQ,CAAC,gBAAc,gBAAc,gBAAc,iBACnDC,QAAS,iBAEX,CACEF,SAAU,iDACVC,OAAQ,CAAC,iBAAe,iBAAe,iBAAe,iBACtDC,QAAS,iBAEX,CACEF,SAAU,uBACVC,OAAQ,CAAC,QAAS,QAAS,QAAS,UACpCC,QAAS,UAGbC,eAAgB,EAChBC,aAAc,EACdC,YAAY,EACZC,OAAO,CAAC,OAAO,OAAO,OAAO,SAvBd,E,mEA2BbP,EAAKQ,EAAeC,EAAaH,EAAWI,GAChD,IAAMC,EAAaC,KAAKb,MAAMC,KAAKQ,GAAgBL,QAEnD,IAAGG,EAAH,CAIA,IAAIO,EAAYD,KAAKb,MAAMQ,OAAOO,QAClCD,EAAY,CAAC,OAAQ,OAAQ,OAAQ,QAElCL,GAAiB,EACfG,IAAeX,GAEhBS,GAAe,EACfI,EAAUH,IAAU,UAGpBG,EAAUH,IAAU,SAGtBF,EAAiB,EAEnBI,KAAKG,SAAS,CACZX,eAAgBI,EAChBH,aAAcI,EACdH,YAAY,EACZC,OAAQM,O,4BAMNL,EAAeC,GACnB,IAAII,EAAYD,KAAKb,MAAMQ,OAAOO,QAClCD,EAAY,CAAC,OAAQ,OAAQ,OAAQ,QAGrCD,KAAKG,SAAS,CACZX,eAHc,EAIdC,aAHY,EAIZE,OAAQM,M,2BAIPL,GACH,IAAIK,EAAYD,KAAKb,MAAMQ,OAAOO,QAClCD,EAAY,CAAC,OAAQ,OAAQ,OAAQ,QACrCL,GAAiB,EACjBI,KAAKG,SAAS,CACZX,eAAgBI,EAChBF,YAAY,EACZC,OAAQM,M,2BAIPL,GACAA,EAAiB,EAClBA,GAAiB,EAEjBA,EAAiB,EAEnBI,KAAKG,SAAS,CACZX,eAAgBI,M,+BAIV,IAAD,OACDA,EAAiBI,KAAKb,MAAMK,eAC5BK,EAAeG,KAAKb,MAAMM,aAC1BC,EAAaM,KAAKb,MAAMO,WACxBO,EAAYD,KAAKb,MAAMQ,OAC7B,GAAIC,GAAkB,EAAG,CACvB,IAAMQ,EAAcJ,KAAKb,MAAMC,KAAKQ,GAAgBP,SAE9CC,EADYU,KAAKb,MAAMC,KAAKQ,GAAgBN,OACzBe,KAAI,SAACjB,EAAMU,GAAP,OAC3B,wBAAIQ,IAAKlB,GACP,wBAAImB,UAAWN,EAAUH,GAAQU,QAAS,kBAAM,EAAKC,MAAMrB,EAAKQ,EAAeC,EAAaH,EAAWI,KACrG,2BAAIV,QAIV,OACE,yBAAKmB,UAAU,OACb,oCACA,4BAAKH,GACJd,EACAI,EACD,4BAAQa,UAAU,OAAOC,QAAS,kBAAM,EAAKE,KAAKd,KAAiB,oCACnE,4BAAQW,UAAU,OAAOC,QAAS,kBAAM,EAAKG,KAAKf,KAAiB,qCAIvE,OACE,yBAAKW,UAAU,OACb,kFAAyBV,EAAzB,WACA,4BAAQU,UAAU,QAAQC,QAAS,kBAAM,EAAKI,MAAMhB,EAAeC,KAAe,uD,GA3H1EgB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d4c47841.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Z_ASCII } from \"zlib\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quiz: [\n        {\n          question: \"Câu 1 : Con chó có mấy chân ?\",\n          answer: [\"A : 1 chân\", \"B : 2 chân\", \"C : 3 chân\", \"D : 4 chân\"],\n          correct: \"D : 4 chân\"\n        },\n        {\n          question: \"Câu 2 : Con mèo có mấy chân ?\",\n          answer: [\"A : 10 chân\", \"B : 20 chân\", \"C : 30 chân\", \"D : 4 chân\"],\n          correct: \"D : 4 chân\"\n        },\n        {\n          question: \"Câu 3 : 1 + 1 = ?\",\n          answer: [\"A : 1\", \"B : 2\", \"C : 3\", \"D : 4 \"],\n          correct: \"B : 2\"\n        }\n      ],\n      numberquestion: 0,\n      totalcorrect: 0,\n      isAnswered: false,\n      status:[\"exit\",\"exit\",\"exit\",\"exit\"],\n    };\n  }\n\n  check(quiz,numberQuestion,totalCorrect,isAnswered,index) {\n    const newCorrect = this.state.quiz[numberQuestion].correct;\n    \n    if(isAnswered){\n      return;\n    }\n\n    let newStatus = this.state.status.slice();\n    newStatus = ['exit', 'exit', 'exit', 'exit'];\n\n    if(numberQuestion <=2){\n      if(newCorrect === quiz){\n        // numberQuestion +=1;\n        totalCorrect +=1;\n        newStatus[index] += \" exit1\"\n      } else{\n        // numberQuestion +=1;\n        newStatus[index] += \" exit1\"\n      }\n    } else{\n      numberQuestion = 0;\n    }\n    this.setState({\n      numberquestion: numberQuestion,\n      totalcorrect: totalCorrect,\n      isAnswered: true,\n      status :newStatus,\n    })\n\n  }\n\n\n  reset(numberQuestion,totalCorrect){\n    let newStatus = this.state.status.slice();\n    newStatus = ['exit', 'exit', 'exit', 'exit'];\n    numberQuestion =0;\n    totalCorrect =0;\n    this.setState({\n      numberquestion: numberQuestion,\n      totalcorrect: totalCorrect,\n      status :newStatus,\n    })\n  }\n\n  next(numberQuestion){\n    let newStatus = this.state.status.slice();\n    newStatus = ['exit', 'exit', 'exit', 'exit'];\n    numberQuestion +=1;\n    this.setState({\n      numberquestion: numberQuestion,\n      isAnswered: false,\n      status :newStatus,\n    })\n  }\n  \n  back(numberQuestion){\n    if(numberQuestion > 0){\n      numberQuestion -=1;\n    } else{\n      numberQuestion = 0;\n    }\n    this.setState({\n      numberquestion: numberQuestion,\n    })\n  }\n\n  render() {\n    const numberQuestion = this.state.numberquestion;\n    const totalCorrect = this.state.totalcorrect;\n    const isAnswered = this.state.isAnswered;\n    const newStatus = this.state.status;\n    if (numberQuestion <= 2) {\n      const newQuestion = this.state.quiz[numberQuestion].question;\n      const newAnwers = this.state.quiz[numberQuestion].answer;\n      const answer = newAnwers.map((quiz, index) => (\n        <li key={quiz}>\n          <h3 className={newStatus[index]} onClick={() => this.check(quiz,numberQuestion,totalCorrect,isAnswered,index)}>\n            <p>{quiz}</p>\n          </h3>\n        </li>\n      ));\n      return (\n        <div className=\"App\">\n          <h1>Quiz</h1>\n          <h2>{newQuestion}</h2>\n          {answer}\n          {isAnswered}\n          <button className=\"next\" onClick={() => this.next(numberQuestion)}><b>Next</b></button>\n          <button className=\"back\" onClick={() => this.back(numberQuestion)}><b>Back</b></button>\n        </div>\n      );\n    } else {\n      return(\n        <div className=\"App\">\n          <h1>Bạn đã trả lời đúng {totalCorrect} câu</h1>\n          <button className=\"click\" onClick={() => this.reset(numberQuestion,totalCorrect)}><b>Chơi lại</b></button>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}